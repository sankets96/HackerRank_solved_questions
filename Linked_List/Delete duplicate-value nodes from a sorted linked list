Delete duplicate-value nodes from a sorted linked list

You are given the pointer to the head node of a sorted linked list, where the data in the nodes is in ascending order. Delete nodes and return a sorted list with each distinct value in the original list. The given head pointer may be null indicating that the list is empty.

Example
 Head refers to the first node in the list . 1->2->2->3->3->3->NULL
Remove 1 of the 2 data values and return  pointing to the revised list . 1->2->3->NULL

Function Description
Complete the removeDuplicates function in the editor below.
removeDuplicates has the following parameter:
SinglyLinkedListNode pointer head: a reference to the head of the list

Returns
SinglyLinkedListNode pointer: a reference to the head of the revised list.

Input Format
The first line contains an integer , the number of test cases.
The format for each test case is as follows:
The first line contains an integer , the number of elements in the linked list.
Each of the next  lines contains an integer,data the  value for each of the elements of the linked list.

Solution : 
def removeDuplicates(llist):
    curr = llist
    nxt = None
    if curr ==None:
        return
    while curr.next!=None:
        if curr.data ==curr.next.data:
            nxt = curr.next.next
            curr.next=None
            curr.next=nxt
        else:
            curr=curr.next
            
            
    return llist
