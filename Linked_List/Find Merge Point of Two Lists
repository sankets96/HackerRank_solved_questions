Find Merge Point of Two Lists
Given pointers to the head nodes of  linked lists that merge together at some point, find the node where the two lists merge.
The merge point is where both lists point to the same node, i.e. they reference the same memory location. It is guaranteed that the two head nodes will be different, 
and neither will be NULL. If the lists share a common node, return that node's  value.

Note: After the merge point, both lists will share the same node pointers.

Function Description
Complete the findMergeNode function in the editor below.
findMergeNode has the following parameters:
SinglyLinkedListNode pointer head1: a reference to the head of the first list
SinglyLinkedListNode pointer head2: a reference to the head of the second list

Returns
int: the data value of the node where the lists merge

Input Format
Do not read any input from stdin/console.
The first line contains an integer , the number of test cases.
Each of the test cases is in the following format:
The first line contains an integer,index , the node number where the merge will occur.
The next line contains an integer,intiger count that is the number of nodes in the first list.
Each of the following  lines contains list1 count a  value for a node. 
The next line contains list2 count an integer,  that is the number of nodes in the second list.
Each of the following list2 count lines contains a data value for a node.

===============================================================================================================================
solution:
# SinglyLinkedListNode:
#     int data
#     SinglyLinkedListNode next
#
#
def findMergeNode(head1, head2):   
    while head1:
        node = head2
        while node:
            if head1 == node:
                return head1.data
            node = node.next
        head1 = head1.next
